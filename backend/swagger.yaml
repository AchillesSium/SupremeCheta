openapi: 3.0.0
info:
  title: Supreme Cheta API
  description: Multi-vendor E-commerce Platform API
  version: 1.0.0
  contact:
    email: support@supremecheta.com

servers:
  - url: http://localhost:5001/api
    description: Development server
  - url: https://api.supremecheta.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        address:
          type: string
        role:
          type: string
          enum: ['superAdmin', 'admin', 'user', 'guest']
        phone_number:
          type: string

    Category:
      type: object
      properties:
        name:
          type: string
          description: "Category name"
        description:
          type: string
        attribute_id:
          type: string
          format: uuid
          description: "ID of the associated attribute (if applicable)"
        parentCategory:
          type: string
          format: uuid
          nullable: true
          description: "Parent category ID (null if main category)"
        subcategories:
          type: array
          items:
            type: string
            format: uuid
          description: "List of subcategory IDs"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - first_name
                - last_name
                - role
                - phone_number
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                first_name:
                  type: string
                last_name:
                  type: string
                address:
                  type: string
                role:
                  type: string
                  enum: ['superAdmin', 'admin', 'user', 'guest']
                  default: 'user'
                phone_number:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /user/getAllUsers:
    get:
      tags:
        - User
      summary: Get all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error

  /user/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error

    put:
      tags:
        - User
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
        '404':
          description: User not found

    delete:
      tags:
        - User
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error

  /user/role/{role}:
    get:
      tags:
        - User
      summary: Get users by role
      parameters:
        - name: role
          in: path
          required: true
          schema:
            type: string
            enum: ['superAdmin', 'admin', 'user', 'guest']
          description: Role of users to fetch
      responses:
        '200':
          description: List of users by role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid role
        '404':
          description: No users found with this role
        '500':
          description: Server error

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      tags:
        - Categories
      summary: Create a new category
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not an admin

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get a category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      tags:
        - Categories
      summary: Update a category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Category not found

    delete:
      tags:
        - Categories
      summary: Delete a category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully
        '404':
          description: Category not found
        '403':
          description: Forbidden - Only admins can delete categories
